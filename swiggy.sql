use swiggydb;
## Display all customers who live in 'Delhi'.

SELECT customer_id, name, city
    
FROM
    customers
WHERE
    city = 'Delhi';

### 2.Find the average rating of all restaurants in 'Mumbai'.

SELECT 
    city, 
    ROUND(AVG(COALESCE(rating, 0)), 2) AS avg_rating
FROM
    restaurants
WHERE
    city = 'Mumbai'
GROUP BY city;

##3. List all customers who have placed at least one order.

SELECT 
    c.customer_id, c.name,
    COUNT(o.order_id) AS total_order
FROM
    customers AS c
JOIN
    orders AS o 
ON c.customer_id = o.customer_id
GROUP BY c.customer_id , c.name
HAVING total_order > 0
ORDER BY total_order DESC;



## 4.  Display the total number of orders placed by each customer.
SELECT 
    c.name, 
    COUNT(o.order_id) AS total_orders
FROM
    customers AS c
JOIN
    orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.name
ORDER BY total_orders DESC;

## 5. Find the total revenue generated by each restaurant.
# total_revenue( sales* quantity)

SELECT 
    r.name AS restaurant_name,
    SUM(o.total_amount) AS total_revenue
FROM
    restaurants AS r
        
LEFT JOIN
    orders AS o
ON r.restaurant_id = o.restaurant_id
GROUP BY r.name;






## 6. Find the top 5 restaurants with the highest average rating.

WITH avg_rat AS
(SELECT restaurant_id,name, 
round(avg(coalesce(rating,0)),2)AS avg_rating 
FROM restaurants
GROUP BY restaurant_id,name),
ranked AS 
(SELECT  *,
dense_rank() over(order by avg_rating desc) AS top_rank
FROM avg_rat)
SELECT *
FROM ranked
WHERE top_rank <=5;

## 7. Display all customers who have never placed an order.

SELECT 
    c.customer_id, c.name, o.order_id
FROM
    customers AS c
LEFT JOIN
    orders AS o 
ON c.customer_id = o.customer_id
WHERE
    order_id IS NULL;

 ## 8 Find the number of orders placed by each customer in 'Mumbai'
 
SELECT 
    c.name, 
    c.city, COUNT(o.order_id)
FROM
    customers AS c
LEFT JOIN
    orders AS o 
ON c.customer_id = o.customer_id
WHERE
    city = 'Mumbai'
GROUP BY c.name , c.city
;

## 9. Display all orders placed in the last 30 days.

 SELECT 
    order_id, date(order_date), status
FROM
    orders
WHERE
    order_date BETWEEN (SELECT 
            MAX(order_date)
          FROM
            orders) - INTERVAL 15 DAY AND
            (SELECT 
            MAX(order_date)
        FROM
            orders);

 
 ## 10. List all delivery partners who have completed more than 1 delivery
 
 SELECT 
    dp.partner_id,
    dp.name,
    o.status,
    COUNT(o.order_id) AS delievery_count
FROM
    deliverypartners AS dp
JOIN
    orderdelivery AS od
ON dp.partner_id = od.partner_id
JOIN
    orders AS o 
ON od.order_id = o.order_id
WHERE
    o.status = 'completed'
GROUP BY dp.partner_id,dp.name , o.status
HAVING delievery_count > 1;
 
 ## 11. Find the customers who have placed orders on exactly three different days.

 SELECT 
    c.customer_id,
    c.name,
    COUNT(DISTINCT o.order_date) unique_days
FROM
    customers AS c
JOIN
    orders AS o 
ON c.customer_id = o.customer_id
GROUP BY c.customer_id , c.name
HAVING COUNT(DISTINCT o.order_date) = 3;
 
 
 
 
 #### 12.Find the delivery partner who has worked with the most different customers.
 
SELECT 
    dp.name, 
    COUNT(DISTINCT od.order_id) AS diff_customer
FROM
    deliverypartners AS dp
JOIN
    orderdelivery od 
ON dp.partner_id = od.partner_id
GROUP BY dp.name
ORDER BY diff_customer DESC
LIMIT 1;


## 13. Identify customers who have the same city and have placed orders at the same restaurants, but on different dates.

SELECT DISTINCT
    c1.name AS cust1,
    c2.name AS cust2,
    c1.city,
    restaurants.restaurant_id,
    restaurants.name,
    DATE(o1.order_date) AS order_cust1,
    DATE(o2.order_date) AS order_cust2
FROM
    customers AS c1
JOIN
    orders AS o1 ON c1.customer_id = o1.customer_id
JOIN
    customers AS c2 ON c1.city = c2.city
JOIN
    orders AS o2 ON o2.customer_id = c2.customer_id
JOIN
    restaurants ON restaurants.restaurant_id = o2.restaurant_id
WHERE
    o1.restaurant_id = o2.restaurant_id
AND DATE(o1.order_date) <> DATE(o2.order_date)
AND c1.customer_id <> c2.customer_id; 




 



 



